-----------------------------------------------------
JavaScript Variables can be declared in 4 ways:

Automatically
Using var
Using let
Using const

-----------------------------------------------------
Types of JavaScript Operators:
Arithmetic Operators
Assignment Operators
Comparison Operators
String Operators
Logical Operators
Bitwise Operators
Ternary Operators
Type Operators


1. Arithmetic operators ( +, -, *, / )
2. Assignment operators (=)
3. Comparison operators ( == , === , > , < , >= , <= )
4. Logical operators ( && , || , ! )
5. Bitwise operators ( & , | , ^ , ~ , << , >> )
6. String concatenation operator (+)
7. Type casting operators ( Number() , String() , Boolean() , Array() , Object() )
8. Increment and Decrement operators ( ++ , -- )        
9. Ternary conditional operator (? : )
------------------------------------------------------

------------------------------------------------------
Data Types
JavaScript has 8 Datatypes
1. Number
2. Boolean
3. String
4. Object
5. NULL
6. undefined
7. BigInt
8. Symbol
------------------------------------------------------

------------------------------------------------------
String Methods

(1)trim && trimleft && trimstart && trimend && trimright

-> trim removes white space from both side
-> trimleft and trimstart both are same old Browser use trimleft and new use trimstart
-> same for trimend and trimright

(2)slice vs substr vs substring

-> slice returns portion of string 
    let str="Aditya Hii"
    str.slice(0,3) gives "Adi"

-> substr returns portion of string but it's second param is length of sub string
    str.substr(0,3) gives "Adi"

-> substring is same as slice

Differences:

-> substr uses the second parameter as the length of the substring, while substring and slice use it as the index to stop at.
-> substring treats a negative startIndex as 0, while slice and substr consider it as counting from the end of the string.
-> All three methods can be used with negative indices to extract characters from the end of the string, but the exact behavior differs.

(3) replace vs replaceall
-> replace replaces only first occurance of a value
-> replaceall replaces all the occurrances of a value

-> replace(searchValue, newValue)
-> replaceAll(searchValue, newValue)

->Both methods accept regular expressions as the searchValue, providing more advanced pattern matching capabilities.

(4)String concat()

(5)String charAt(index)
    String charCodeAt(index)

(6)string.split(separator, limit) (also use for string to array conversion string.split(""))
let sentence = "Hello, World! How are you?";
let words = sentence.split(" ");
console.log(words);
// Output: ["Hello,", "World!", "How", "are", "you?"]

(7)padStart(targetLength, padString) vs padEnd(targetLength, padString)

-> padStart() and padEnd() are string methods used to pad a string with a specified character or a repeated sequence of characters until it reaches a specified length.

------------------------------------------------------


------------------------------------------------------
String Search Methods

(1) indexOf(searchValue, startIndex) and lastIndexOf(searchValue, startIndex) vs Search(string or regexp)

-> The indexOf() method returns the first occurrence of the specified substring in the calling string. If the substring is not found, it returns -1.

-> The lastIndexOf() method returns the last occurrence of the specified substring in the calling string. If the substring is not found, it returns -1.

->Note indexOf and lastIndexOf take a string as an argument.

->search() method expects a regular expression as its argument. If you attempt to pass a string, it will be implicitly converted to a regular expression.

(2) match and matchall

-> The match() method is used to search a string for a specified pattern and returns the first match found as an array. If no match is found, it returns null.

-> The matchAll() method is used to find all matches of a regular expression in a string. It returns an iterator containing all the matches and their capturing groups.

Key Differences:

-> match returns the first match as an array.
-> matchAll returns an iterator over all matches, allowing you to iterate through them.

(3) includes(searchValue, startIndex)

->check if a particular value exists in the string or array. The method returns a boolean value: true if the specified value is found, and false otherwise.

(4) startsWith(searchString, position) and endsWith(searchString, length)

-> Both startsWith() and endsWith() return true if the specified string is found at the respective beginning or end of the calling string; otherwise, they return false. These methods are useful for checking prefixes and suffixes in strings.
------------------------------------------------------